import argparse
import os
import sys
project_root = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(project_root)
sys.path.insert(0, project_root)
from yolov5 import val
# 注意：后面的结果分析部分依赖 pandas 和 matplotlib，请确保已安装
# pip install pandas matplotlib
import pandas as pd
import matplotlib.pyplot as plt
from pathlib import Path

def test_model():
    parser = argparse.ArgumentParser()
    parser.add_argument('--weights', type=str, default=os.path.abspath('/home/cyy/yolov5--cones/runs/train/my_model_run/weights/best.pt'))
    parser.add_argument('--data', type=str, default=os.path.abspath('/home/cyy/yolov5--cones/dataset/cones.yaml'))
    parser.add_argument('--batch-size', type=int, default=16)
    
    # 【修正】将参数名从 '--img-size' 改为 '--imgsz'
    # 这样 argparse 就会创建 opt.imgsz 属性，而不是 opt.img_size
    parser.add_argument('--imgsz', type=int, default=640, help='inference size (pixels)')
    
    parser.add_argument('--conf-thres', type=float, default=0.001)
    parser.add_argument('--iou-thres', type=float, default=0.6)
    parser.add_argument('--name', type=str, default='my_model_test')
    parser.add_argument('--project', type=str, default=os.path.abspath('/home/cyy/yolov5--cones/runs/test'))
    # 添加 task 参数，因为 val.run 需要它
    parser.add_argument('--task', type=str, default='test', help='val, test, or study')

    opt = parser.parse_args()
    
    # 确保目录存在
    os.makedirs(opt.project, exist_ok=True)
    
    # 运行测试
    # val.run 返回一个包含指标的元组
    results = val.run(**vars(opt))
    
    # 注意：val.run 在测试模式下可能不会生成 CSV 和 PNG 文件
    # 下面的结果分析部分可能需要根据实际输出进行调整
    # save_results(results, opt.project, opt.name)

# 注意：val.run 在默认情况下不会生成 CSV 文件或曲线图
# 它的主要返回值是一个元组，包含 mAP 等指标
# 下面的函数可能无法直接运行，因为它找不到文件
# 您需要根据 val.run 的实际输出来调整这部分代码
def save_results(results, project, name):
    # 创建结果目录
    results_dir = os.path.join(project, name) # YOLOv5 会自动创建这个目录
    analysis_dir = os.path.join(results_dir, 'analysis')
    os.makedirs(analysis_dir, exist_ok=True)
 
    print(f"Metrics (mAP@0.5, mAP@0.5:0.95): {results}")
    
    # 保存主要指标
    with open(os.path.join(analysis_dir, 'metrics.txt'), 'w') as f:
        f.write(f"mAP@0.5: {results[0]:.4f}\n")
        f.write(f"mAP@0.5:0.95: {results[1]:.4f}\n")
        # results 元组可能不包含 precision 和 recall，这里先注释掉
        # f.write(f"Precision: {results[2]:.4f}\n")
        # f.write(f"Recall: {results[3]:.4f}\n")
    
    print(f"测试指标已保存到: {analysis_dir}")

    # --- 以下部分可能需要修改 ---
    try:
        # 尝试寻找 YOLOv5 生成的 PR 曲线并移动
        pr_curve_path = Path(results_dir) / 'PR_curve.png'
        if pr_curve_path.exists():
            os.rename(pr_curve_path, os.path.join(analysis_dir, 'pr_curve.png'))
            print("PR curve moved to analysis folder.")

        # 尝试寻找混淆矩阵并移动
        cm_path = Path(results_dir) / 'confusion_matrix.png'
        if cm_path.exists():
            os.rename(cm_path, os.path.join(analysis_dir, 'confusion_matrix.png'))
            print("Confusion matrix moved to analysis folder.")
    except Exception as e:
        print(f"Could not find or move result images: {e}")
        print("This is normal if they were not generated by the run.")


if __name__ == '__main__':
    test_model()