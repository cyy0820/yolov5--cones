# 忽略大文件
datasets/
runs/
*.pt
*.onnx
*.torchscript

# 字节编译/优化/动态链接库文件
__pycache__/
*.py[codz]
*$py.class

# C 扩展
*.so

# 分发/打包
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
# 通常这些文件是 PyInstaller 构建可执行文件前，由 Python 脚本根据模板生成的，
# 目的是将日期或其他信息注入其中。
*.manifest
*.spec

# 安装日志
pip-log.txt
pip-delete-this-directory.txt

# 单元测试/覆盖率报告
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py.cover
.hypothesis/
.pytest_cache/
cover/

# 翻译文件
*.mo
*.pot

# Django 相关文件
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask 相关文件
instance/
.webassets-cache

# Scrapy 相关文件
.scrapy

# Sphinx 文档
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#  对于库或包，可能需要忽略这些文件，因为代码旨在在多个环境中运行；
#  否则，请将它们纳入版本控制。
# .python-version

# pipenv
#  根据 pypa/pipenv#598，建议将 Pipfile.lock 纳入版本控制。
#  然而，在协作场景下，如果存在特定平台的依赖项或不支持跨平台的依赖项，
#  pipenv 可能会安装不兼容的依赖项，或者无法安装所有必要的依赖项。
#Pipfile.lock

# UV
#  与 Pipfile.lock 类似，通常建议将 uv.lock 纳入版本控制。
#  对于二进制包，这一点尤为重要，以确保可重复性；对于库，则更常被忽略。
#uv.lock

# poetry
#  与 Pipfile.lock 类似，通常建议将 poetry.lock 纳入版本控制。
#  对于二进制包，这一点尤为重要，以确保可重复性；对于库，则更常被忽略。
#  https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock
#poetry.toml

# pdm
#  与 Pipfile.lock 类似，通常建议将 pdm.lock 纳入版本控制。
#  pdm 建议将项目范围的配置包含在 pdm.toml 中，但排除 .pdm-python。
#  https://pdm-project.org/en/latest/usage/project/#working-with-version-control
#pdm.lock
#pdm.toml
.pdm-python
.pdm-build/

# pixi
#  与 Pipfile.lock 类似，通常建议将 pixi.lock 纳入版本控制。
#pixi.lock
#  Pixi 会在 .pixi 目录中创建虚拟环境，就像 venv 模块在 .venv 目录中创建一样。
#  建议不要将此目录纳入版本控制。
.pixi

# PEP 582; 供例如 github.com/David-OConnor/pyflow 和 github.com/pdm-project/pdm 使用
__pypackages__/

# Celery 相关文件
celerybeat-schedule
celerybeat.pid

# SageMath 解析文件
*.sage.py

# 环境文件
.env
.envrc
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder 项目设置
.spyderproject
.spyproject

# Rope 项目设置
.ropeproject

# mkdocs 文档
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre 类型检查器
.pyre/

# pytype 静态类型分析器
.pytype/

# Cython 调试符号
cython_debug/

# PyCharm
#  JetBrains 特定的模板维护在一个单独的 JetBrains.gitignore 文件中，
#  可在 https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore 找到，
#  可以将其添加到全局 gitignore 文件中，或合并到本文件。
#  若采用更激进的方式（不推荐），可以取消注释以下内容以忽略整个 idea 文件夹。
#.idea/

# Abstra
# Abstra 是一个由 AI 驱动的流程自动化框架。
# 忽略包含用户凭证、本地状态和设置的目录。
# 了解更多信息请访问 https://abstra.io/docs
.abstra/

# Visual Studio Code
#  Visual Studio Code 特定的模板维护在一个单独的 VisualStudioCode.gitignore 文件中，
#  可在 https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore 找到，
#  可以将其添加到全局 gitignore 文件中，或合并到本文件。
#  不过，如果你愿意，也可以取消注释以下内容以忽略整个 vscode 文件夹。
# .vscode/

# Ruff 相关文件
.ruff_cache/

# PyPI 配置文件
.pypirc

# Cursor
#  Cursor 是一个由 AI 驱动的代码编辑器。`.cursorignore` 指定要从 AI 功能（如自动补全和代码分析）
#  中排除的文件/目录。对于敏感数据，建议参考 https://docs.cursor.com/context/ignore-files
.cursorignore
.cursorindexingignore

# Marimo
marimo/_static/
marimo/_lsp/
__marimo__/
